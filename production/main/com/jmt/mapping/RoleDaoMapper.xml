<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.jmt.dao.RoleDao"><!-- space里面写的是对应的dao层的接口 -->
	<!-- 当持久化类的属性与数据库字段不一致时，在SQL语句中使用别名很麻烦，所以使用resultMap实现持久化类属性和字段的映射 -->

	<resultMap type="com.jmt.pojo.Role" id="RoleResultMap">
		<id column="id" property="id" />
		<result column="name" property="name" />
		<result column="enname" property="enname" />
		<result column="office_id" property="officeId" />
		<result column="role_type" property="roleType" />
		<result column="data_scope" property="dataScope" />
		<result column="is_sys" property="sysData" />
		<result column="useable" property="useable" />
		<!-- <result column="create_by" property="createBy"/> -->
		<result column="create_date" property="createDate" />
		<!-- <result column="update_by" property="updateBy"/> -->
		<result column="update_date" property="updateDate" />
		<result column="remarks" property="remarks" />
		<result column="del_flag" property="delFlag" />
		<!-- office单个实体 -->
		<association property="office" javaType="com.jmt.pojo.Office" column="office_id">
			 <id property="id" column="id"/>
			<result column="name" property="name" />
		</association>
		<!-- 菜单集合 -->
		<collection property="menuList" ofType="com.jmt.pojo.Menu">
			<id property="id" column="menuList.id" />
		</collection>
		<!-- 办公机构集合 -->
		<collection property="officeList" ofType="com.jmt.pojo.Office">
			<id property="id" column="officeList.id" />
		</collection>
	</resultMap>
	<!-- <resultMap type="com.jmt.pojo.Role" id="RoleUserResultMap" extends="RoleResultMap"> 
		一个用户里对应着多个角色，所以要用到集合 <collection property="users" ofType="com.jmt.pojo.User"> 
		<id property="id" column="id" /> <result property="companyId" column="COMPANY_ID" 
		/> <result property="officeId" column="OFFICE_ID" /> <result property="loginName" 
		column="LOGIN_NAME" /> <result property="password" column="password" /> <result 
		property="no" column="no" /> <result property="name" column="name" /> <result 
		property="email" column="email" /> <result property="phone" column="phone" 
		/> <result property="mobile" column="mobile" /> <result property="userType" 
		column="USER_TYPE" /> <result property="photo" column="hiredate" /> <result 
		property="loginIp" column="LOGIN_IP" /> <result property="loginDate" column="LOGIN_DATE" 
		/> <result property="loginFlag" column="LOGIN_FLAG" /> <result property="createBy" 
		column="CREATE_BY" /> <result property="createDate" column="CREATE_DATE" 
		/> <result property="updateBy" column="UPDATE_BY" /> <result property="updateDate" 
		column="UPDATE_DATE" /> <result property="remarks" column="remarks" /> <result 
		property="delFlag" column="DEL_FLAG" /> <result property="qrcode" column="qrcode" 
		/> </collection> </resultMap> -->
	<!-- sql片段 -->
	<sql id="roleColumns">
		a.id,
		a.office_id <!-- AS "office.id" -->
		,
		a.name,
		a.enname,
		a.role_type
		,
		a.data_scope
		,
		a.remarks,
		a.create_by AS
		"createBy.id",
		a.create_date,
		a.update_by AS
		"updateBy.id",
		a.update_date,
		a.del_flag,
		o.id,
		o.name AS "officeName"
		,
		o.code,
		a.useable <!-- AS useable -->
		,
		a.is_sys <!-- AS sysData -->
	</sql>
	<!-- 为RoleDao的getRole()方法定义对应的SQL映射语句 -->
	<select id="getRole" parameterType="String" resultMap="RoleResultMap">
		<!-- select * from sys_role where sys_role.id=#{id} -->
		SELECT
		<include refid="roleColumns" />
		,
		rm.menu_id AS "menuList.id",
		ro.office_id AS "officeList.id"
		FROM
		sys_role a
		LEFT JOIN sys_office o ON o.id =
		a.office_id
		LEFT JOIN
		sys_role_menu rm ON rm.role_id = a.id
		LEFT JOIN
		sys_role_office ro ON
		ro.role_id = a.id
		WHERE a.id = #{id}
	</select>


	<!-- 为RoleDao的findRoleMenuByRoleId()方法定义对应的SQL映射语句 -->
	<select id="findRoleMenuByRoleId" parameterType="String"
		resultType="com.jmt.pojo.RoleMenu">
		select distinct r.*,m.*
		from sys_role r, sys_menu m,
		sys_role_menu rm
		where r.id = rm.role_id
		and rm.menu_id = m.id
		and r.id =
		#{id}
	</select>
	<!-- 查询所有的角色信息findAllRole -->
	<select id="findAllRole" resultType="com.jmt.pojo.Role">
		select * from sys_role
	</select>
	<!-- 根据用户编号查询他所有的角色信息 -->
	<select id="findRoleInfoByUserId" parameterType="String"
		resultType="com.jmt.pojo.Role">
		select *
		from sys_role
		where id in (select role_id
		from
		sys_user_role sur
		where sur.user_id =#{id})

	</select>

	<!-- 根据角色编号查询角色信息，包括机构信息 -->
	<select id="finRoleOfficeByUserId" parameterType="String"
		resultMap="RoleResultMap">
		<!-- select * from sys_role where sys_role.id=#{id} -->
		SELECT
		<include refid="roleColumns" />
		,
		rm.menu_id AS "menuList.id",
		ro.office_id AS "officeList.id"
		FROM
		sys_role a
		LEFT JOIN sys_office o ON o.id =
		a.office_id
		LEFT JOIN
		sys_role_menu rm ON rm.role_id = a.id
		LEFT JOIN
		sys_role_office ro ON
		ro.role_id = a.id
		WHERE a.id = #{id}
	</select>
	<!-- 修改角色信息 -->
	<update id="updateRoleInfo" parameterType="com.jmt.pojo.Role">

		update sys_role set
		office_id=#{office.id},name=#{name},enname=#{enname},role_type=#{roleType},is_sys=#{sysData},useable=#{useable},data_scope=#{dataScope},remarks=#{remarks}
		where id=#{id}

	</update>
</mapper>
